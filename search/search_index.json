{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Lichess Development Documentation","text":"<p>Lichess.org is an open-source chess server. This documentation is for developers who want to contribute to the project.</p>"},{"location":"#code-architecture","title":"Code + Architecture","text":"<p>The main Lichess code is written in Scala and Typescript. Some of the supporting services are written in Rust.</p> <p>For a full list of repositories and to see an architecture diagram, see lichess.org/source.</p> <p>What is lila?</p> <p>Lichess is primarily written in the Scala programming language. The name for the main Lichess codebase is \"lila\", which stands for \"Lichess in Scala\".</p>"},{"location":"#ways-you-can-contribute","title":"Ways you can contribute","text":"<ul> <li>For non-code ways you can contribute, see lichess.org/help/contribute</li> <li>See Github issues that we tagged as \"good first issue\"</li> <li>See what others are working on or offer help in the <code>#lichess-dev-onboarding</code> channel on the Lichess Discord</li> </ul>"},{"location":"#setting-up-a-development-environment","title":"Setting up a development environment","text":"<p>There are 3 ways you can run a development environment, with increasing complexity:</p> <ol> <li>lila-gitpod - Will create a development environment in a remote workspace. This doesn't require any setup on your local machine. Try this to get started quickly and see what a development environment looks like on a fresh install.</li> <li>lila-docker - Run Lichess locally in Docker containers.</li> <li>Install the dependencies and run all the services on your local machine. See Local Setup for instructions.</li> </ol>"},{"location":"#competence-development-program","title":"Competence development program","text":"<p>Lichess would like to support its contributors in their competence development by covering costs of relevant training materials and activities. This is a small way to further empower contributors who have given their time to Lichess and to enable or improve additional contributions to Lichess in the future. For more information, including how to apply, check Competence Development for Lichess contributors.</p>"},{"location":"other-resources/","title":"Other Resources","text":"<ul> <li>Information on Contributing to Lichess</li> <li>An explanation of the Lichess repositories, services, architecture</li> <li>Gitpod documentation</li> <li>Lichess API docs</li> <li>Lichess.org Discord server (See #lichess-dev-onboarding for help)</li> </ul>"},{"location":"development/conventions/","title":"Conventions","text":""},{"location":"development/conventions/#naming-conventions","title":"Naming Conventions","text":"<ul> <li>provide global guidance here for naming functions and variables where possible, customize for each language in specific sections below</li> <li>truly general stuff can go here like \"prefix boolean methods with is/has/can\"</li> </ul>"},{"location":"development/conventions/#scala","title":"Scala","text":"<ul> <li>camelCase, first letter capitals for constants, classes, objects, types, blah</li> <li>prefer scala3 style (indent unless braces are needed, no-paren ifs, etc)</li> <li>prefer extension methods in lila.common.base.*, ornicar.scalalib, and cats (.some, Option.has, etc)</li> </ul>"},{"location":"development/conventions/#typescript","title":"Typescript","text":"<ul> <li>follow https://google.github.io/styleguide/tsguide.html except for:</li> <li>feel free to use <code>#privateIdent</code> if it allows better minification and compatibility</li> <li>do use <code>_</code> prefix for unused arguments</li> <li>no <code>snake_case</code> for filenames. Use <code>camelCase</code> instead.</li> <li>jsdoc comments are not required, instead you should strive for function, parameter, names, and types so that the LSP info your editor gives is enough.</li> <li>random lila bits</li> <li>suggest when to bundle module code (common, chess, etc) vs lazy load it (analyse, etc)</li> <li>discourage index.d.ts, specify criteria for putting stuff there (solves module dependency, etc)</li> <li>index.d.ts not currently watched by ui/build</li> <li>interface members</li> <li>use arrow function syntax to define callback signatures</li> <li>traditional function syntax to describe service implementations</li> <li>find and link to straightforward explanation of <code>this</code> behavior (arrow functions, etc.)</li> </ul>"},{"location":"development/conventions/#mongo","title":"mongo","text":"<ul> <li>snake_case collections, camelCase fields</li> </ul>"},{"location":"development/csrf/","title":"Defenses against Cross Site Request Forgery","text":""},{"location":"development/csrf/#preventing-unauthorized-writes","title":"Preventing unauthorized writes","text":"<p>Rule 1: HTTP endpoints must strictly use the appropriate HTTP methods, i.e. <code>GET</code> and other \"safe\" methods should not change any state on the server.</p> <p>Before even routing, a global request handler checks the <code>Origin</code> header on all unsafe requests.</p>"},{"location":"development/csrf/#preventing-unauthorized-reads","title":"Preventing unauthorized reads","text":"<p>~In absence of CORS, only JSON and XML can be read in cross site requests.~</p> <p>~Rule 2: All JSON endpoints that can be queried with simple requests must treat requests as unauthenticated/anonymous and should live under <code>/api/</code>.~</p> <p>~For requests that cannot be anonymous (e.g. XHR and requests by the mobile app) simply require them to be not simple. This can be done by requiring the <code>X-Requested-With</code> header (check <code>isXhr()</code> in lila).~</p> <p>~Since <code>Accept</code> headers are considered simple, it is insufficient to use only <code>Accept</code> to request a JSON response.~</p> <p>The above rule is no longer required in modern browsers (and older browsers cannot load Lichess because we only support modern TLS).</p> <p>Rule 3: Endpoints under /api/ must not use authentication via Cookie.</p> <p>This allows <code>/api/</code> to safely be whitelisted for CORS from all origins. When authentication is required, OAuth can be used instead.</p>"},{"location":"development/csrf/#websockets","title":"WebSockets","text":"<p>WebSockets are special, because they are iniated with a safe request, despite often being used to change server side state. Browsers allow creating WebSockets across origins, even in absence of CORS.</p> <p>Rule 4: WebSockets from untrusted origins must be treated as unauthenticated/anonymous.</p>"},{"location":"development/csrf/#trusted-origins","title":"Trusted origins","text":"<ul> <li><code>https://lichess.org</code> and subdomains</li> <li><code>ionic://localhost</code> (mobile app web view on iOS)</li> <li><code>capacitor://localhost</code> (mobile app web view on iOS)</li> <li><code>http://localhost</code> (android app web view, or controlled by the user)</li> <li><code>http://localhost:8080</code> (local development)</li> <li>Absence of <code>Origin</code> header (mobile app web view, or programmatic access controlled by the user, impossible to forge in cross site requests, note that <code>null</code> is rejected)</li> </ul>"},{"location":"development/firefox-multi-account/","title":"Firefox Multi-Account","text":"<p>Most Lila features outside of puzzles and play with computer require interaction between multiple users. Anything that facilitates switching between them is useful for developers.</p> <p>Use Firefox's Multi-Account Container extension to have multiple active users logged in to a lila instance, all in their own tabs with their own session environments (cookies, local storage, etc), without using private browsing. More importantly, if you set up a few containers dedicated to specific users, you'll never have to log that user in again. Just select the user/container from the menu and let Firefox/cookie/lila handle the rest in a newly created tab.</p> <p>This sample Multi-Account Container menu associates containers with spamdb users. The sessions in each container persist across tab closure and browser restarts - just like your default session:</p> <p></p> <p>To make the tabs reflect the username, go to the <code>st.headTitle</code> block in the <code>head</code> tag of the <code>apply</code> method in <code>app/views/base/layout.scala</code> and make it look like this:</p> <pre><code>st.headTitle:\n  if ctx.blind then \"lichess\"\n  else if netConfig.isProd then fullTitle | s\"$title \u2022 lichess.org\"\n  else ctx.me.so(_.username)\n</code></pre> <p>Don't check that in by mistake.</p> <p>To further distinguish them, you can use <code>spamdb.py</code> <code>--user-bg 400</code> option to create users with a random background image selected from <code>data/image-links.txt</code></p>"},{"location":"development/frontend/","title":"Frontend","text":""},{"location":"development/frontend/#getting-started","title":"Getting started","text":"<p>Learn about <code>pnpm</code> here. In most cases, it has the same behavior and syntax as both <code>npm</code> and <code>yarn</code>. Just as you might use <code>npm install</code> or <code>yarn add</code> to add a package with those tools, either <code>pnpm install</code> or <code>pnpm add</code> can be used to do the same with <code>pnpm</code>.</p> <p>Building the client involves <code>tsc</code> to transpile typescript code to javascript, <code>dart-sass</code> to compile <code>*.scss</code> SASS files into CSS, and <code>esbuild</code> to bundle javascript dependencies into individual modules suitable for linkage in an HTML <code>&lt;script&gt;</code> tag.</p>"},{"location":"development/frontend/#using-uibuild","title":"Using ui/build","text":"<p>You probably won't have to interface with <code>dart-sass</code> or <code>esbuild</code> directly. The <code>ui/build</code> tool does it for you.</p> <p><code>ui/build --help</code> is enough to get most people started. The source code can be found here. It uses basic lichess client conventions and information in custom objects in the <code>package.json</code> files in each module to determine how to generate assets.</p> <p>See the <code>lichess</code> object defined in <code>ui/site/package.json</code> for the most comprehensive example. Each line in that <code>bundles</code> object identifies a source typescript (relative to the package.json) and a destination basename (relative to <code>&lt;lila&gt;/public/compiled</code>) that <code>esbuild</code> will use to generate the javascript assets downloaded by the client.</p> <p><code>ui/build</code> will reconcile all <code>node_modules</code> with the <code>pnpm</code> package store according to parsed <code>package.json</code>s each time it is invoked. This behavior can be suppressed with the <code>--no-install</code> argument:</p> <p><code>ui/build --no-install</code></p>"},{"location":"development/frontend/#customizing-linked-pnpm-modules","title":"Customizing linked pnpm modules","text":"<p>How about when you need to make changes to a module from the <code>npm</code> registry such as <code>chessground</code>? For that, you can use <code>pnpm link</code>.</p> <p>Clone the repo you want to modify to <code>&lt;your-local-package&gt;</code>. Then <code>cd</code> to the using module directory - the one containing the <code>package.json</code> you want to link to your package. Finally, type <code>pnpm link &lt;relative-path-to-your-local-package&gt;</code>. Run <code>ui/build</code> again to pick up your changes.</p> <p>For example, to work on pgn-viewer: First <code>git clone https://github.com/lichess-org/pgn-viewer</code> into a directory adjacent to lila root. We'll use the lichess forum code to test our local pgn-viewer. Forum stuff lives in the <code>ui/site</code> module and <code>lichess-pgn-viewer</code> is linked in that module's <code>package.json</code>. So:</p> <pre><code>cd &lt;lila-root&gt;/ui/site\npnpm link ../../../pgn-viewer # relative path to your local package\n</code></pre>"},{"location":"development/frontend/#important","title":"IMPORTANT","text":"<p>Notice that <code>pnpm link</code>actually modifies the <code>pnpm-lock.yaml</code> file in lila root. You don't want to check that modification into git. Therefore:</p> <p><code>git restore &lt;lila-root&gt;/pnpm-lock.yaml</code></p> <p>When you're done with your local package changes. Afterwards, <code>pnpm</code> &amp; <code>ui/build</code> will use the <code>npm</code> registry version again.</p>"},{"location":"development/frontend/#here-are-some-useful-links","title":"Here are some useful links:","text":"<ul> <li>Symbols you can use on lichess webpages (defined in <code>public/font/lichess.sfd</code>)</li> </ul>"},{"location":"development/lilaisms/","title":"Lilaisms","text":"<p>Code concepts and functions that are specific to, and idiomatic to, the lila codebase.</p>"},{"location":"development/lilaisms/#how-lila-uses-scala","title":"How lila uses scala","text":"<p>lila makes little use of object orientation and particularly inheritance, but:</p> <ul> <li>Immutability is required everywhere. Notable exceptions can be made:</li> <li>in akka actors (because race conditions are no longer a concern)</li> <li>in performance sensitive functions. In this case, the mutability     must be contained in the function scope. The function must expose     an immutable signature.</li> <li>in atomic structures like java's <code>AtomicReference</code> or <code>ConcurrentHashMap</code>.</li> <li>Strong typing is preferred. For instance, <code>FiniteDuration</code> is better than <code>Int</code>,   and <code>case class Name(value: String)</code> is better than <code>String</code>.   The more the value is used in the code, and the more useful it is to type it correctly.   This rule is actually loosely respected in lila, but that's the direction we're going to.</li> </ul>"},{"location":"development/lilaisms/#weird-code-you-will-only-see-in-lila","title":"Weird code you will only see in lila","text":"<p>If the function you're looking for is not here, try the scala doc or the cats doc.</p>"},{"location":"development/lilaisms/#disclaimer","title":"Disclaimer","text":"<p>Some of these lilaisms are driven by a compulsive tendency to play code golf. However, they also present benefits in terms of type safety. In any case, contributors are never expected to use lilaisms. You can make use of them, but a pull request will likely not be rejected because it isn't idiomatic to lila. However, immutability and type safety remain requirements (with discussable exceptions).</p>"},{"location":"development/lilaisms/#debugging-actually-useful","title":"Debugging (actually useful)","text":""},{"location":"development/lilaisms/#pp","title":"<code>pp</code>","text":"<p><code>pp</code> means <code>print &amp; pass</code>, it's an inline <code>println</code>. It prints the value and returns it.</p> <pre><code>\"foo\".pp                   // prints \"foo\" to stdout, and returns \"foo\"\n\nplayer.pp.make(move.pp).pp // behaves like player.make(move), but prints\n                           // player, move, and the result of player.make(move)\n\n\"foo\".pp(\"context\")        // prints \"context: foo\" to stdout, and returns \"foo\"\n</code></pre>"},{"location":"development/lilaisms/#thenpp","title":"<code>thenPp</code>","text":"<p>Like <code>pp</code> but applies to futures, and prints their result.</p> <pre><code>fetchUser(id).thenPp       // returns Future[Option[User]] and prints the Option[User] when available\n</code></pre>"},{"location":"development/lilaisms/#type-aliases","title":"Type aliases","text":"<p>For code golf purposes, common types have been aliased.</p> <pre><code>Fu[A]         // Future[A]\nFunit         // Future[Unit]\n</code></pre>"},{"location":"development/lilaisms/#future-shortcuts","title":"Future shortcuts","text":"<pre><code>def fuccess[A](a: A) = Future successful a\ndef fufail[A &lt;: Throwable, B](a: A): Fu[B] = Future failed a\ndef fufail[A](a: String): Fu[A] = fufail(base.LilaException(a))\nval funit = fuccess(())\n</code></pre>"},{"location":"development/lilaisms/#int-functions","title":"Int functions","text":"<p>Reminder: In scala, <code>a.b(c)</code> == <code>a b c</code>. For instance, <code>1.+(2)</code> == <code>1 + 2</code>.</p> <pre><code>// I think it reads better\na atMost b                  // a min b\na atLeast b                 // a max b\n</code></pre>"},{"location":"development/lilaisms/#option-functions","title":"Option functions","text":"<pre><code>42.some                     // Option(42) // or Some(42): Option[Int]\nnone[Int]                   // None: Option[Int]\n\nmaybeInt | 0                // maybeInt.getOrElse(0) // but with extra type safety\nmaybeInt ifTrue boolean     // maybeInt.filter(_ =&gt; boolean)\nmaybeInt ifFalse boolean    // maybeInt.filter(_ =&gt; !boolean)\nmaybeInt has value          // maybeInt contains value // but with extra type safety\n\n~maybeInt                   // maybeInt | 0 // where 0 is provided by the Zero[Int] typeclass instance\n~maybeString                // maybeString | \"\" // thanks to Zero[String] typeclass instance\n~maybeList                  // maybeList | Nil // thanks to Zero[List[_]] typeclass instance\n\nmaybeInt so f               // maybeInt.fold(0)(f)\n                            // e.g. 42.some so (_ + 1) == 43\n                            //      none[Int] so (_ + 1) == 0\nmaybeString so f            // maybeString.fold(\"\")(f)\n\n// etc, with every type having a Zero instance.\n</code></pre>"},{"location":"development/lilaisms/#boolean-functions","title":"Boolean functions","text":"<pre><code>boolean option 42           // if boolean then 42.some else None\n                            // or 42.some ifTrue boolean\n\nboolean so 42               // if boolean then 42 else 0\nboolean so \"foo\"            // if boolean then \"foo\" else \"\"\nboolean so List(1, 2)       // if boolean then List(1, 2) else List.empty[Int]\nboolean so 42.some          // if boolean then 42.some else none\nboolean so fuccess(42)      // if boolean then fuccess(42) else fuccess(0)\nboolean so asyncComputation // if boolean then asyncComputation else funit\n\n// etc, with every type having a Zero instance.\n</code></pre>"},{"location":"development/lilaisms/#future-functions","title":"Future functions","text":"<pre><code>val fu: Future[Int]\nval f: Int =&gt; Boolean\n\nfu dmap f                   // fu map f // but runs on the same thread (perf tweak)\nfu dforeach f               // fu foreach f // but runs on the same thread (perf tweak)\n\nfu.void                     // fu.map(_ =&gt; ()) // discards the result, returns Funit\nfu inject \"foo\"             // fu.map(_ =&gt; \"foo\") // replaces the result\n</code></pre>"},{"location":"development/lilaisms/#sequencing-futures-and-effects","title":"Sequencing futures and effects","text":"<pre><code>fu &gt;&gt; otherFu               // fu.flatMap(_ =&gt; otherFu) // sequence without using first result\nfu &gt;&gt;- effect               // fu andThen { case _ =&gt; effect } // run a side effect after completion\n\nfu1 &gt;&gt; fu2 &gt;&gt;- effect1 &gt;&gt;- effect2 // sequences f1 and f2, then runs effect1 then effect2\n</code></pre> <pre><code>val futures: List[Future[Int]]\n\nfutures.parallel: Future[List[Int]] // executes all futures and return one with a list of values\n</code></pre>"},{"location":"development/lilaisms/#coding-standards","title":"Coding standards","text":"<p>Only mentioning what's not already rewritten by scalafmt.</p>"},{"location":"development/lilaisms/#calling-methods","title":"Calling methods","text":"<pre><code>obj.method(arg)  // yes, best\nobj method arg   // yes if cute and not confusing\nobj.method {     // yes\n  argBlock\n}\nobj.method (arg) // no\nobj method (arg) // no\nobj method(arg) // no\n\nobj.method(arg1, arg2)  // yes\nobj.method (arg1, arg2) // no\nobj method (arg1, arg2) // no\nobj method(arg1, arg2) // no\n\nobj.methodWithoutArg // yes\nobj methodWithoutArg // no\n</code></pre>"},{"location":"development/translations/","title":"Translations","text":"<p>See also: Working on translations</p>"},{"location":"development/translations/#basics","title":"Basics","text":"<p>Everything starts with the various <code>.xml</code> files in <code>translation/source</code>. They define all the individual phrases that can be translated. Each file contains phrases for a certain concept or part of Lichess, e.g. <code>swiss.xml</code> for swiss tournaments, <code>faq.xml</code> for the FAQ, etc. <code>site.xml</code> is the main file that contains all site-wide phrases and everything that doesn't fit anywhere else.</p> <p>Each phrase has a key/name and the original text in British English, e.g.</p> <pre><code>&lt;string name=\"playWithAFriend\"&gt;Play with a friend&lt;/string&gt;\n</code></pre> <p>They can have placeholders marked by <code>%s</code>. These can be replaced by something, i.e. the number of games or a separate translated string that needs to be formatted differently or be a clickable link. <code>%1$s</code>, <code>%2$s</code>, etc. can be used for multiple placeholders.</p> <pre><code>&lt;string name=\"xStartedStreaming\"&gt;%s started streaming&lt;/string&gt;\n&lt;string name=\"xStartedFollowingY\"&gt;%1$s started following %2$s&lt;/string&gt;\n</code></pre> <p>There are also <code>plurals</code> elements for phrases that need to change depending on the value of a placeholder:</p> <pre><code>&lt;plurals name=\"nbBlunders\"&gt;\n  &lt;item quantity=\"one\"&gt;%s blunder&lt;/item&gt;\n  &lt;item quantity=\"other\"&gt;%s blunders&lt;/item&gt;\n&lt;/plurals&gt;\n</code></pre> <p>The content of those <code>.xml</code> files are automatically uploaded to crowdin.com/project/lichess where volunteers translate them. The resulting translations are again automatically downloaded and regularly merged in PRs named \"New Crowdin updates\", resulting in another batch of <code>.xml</code> files in <code>translation/dest/&lt;area&gt;/&lt;lang-code&gt;.xml</code> where <code>&lt;area&gt;</code> is the <code>faq</code>, <code>site</code>, etc. from above.</p>"},{"location":"development/translations/#using-translations-in-scala","title":"Using translations in Scala","text":"<p>There's a Scala equivalent for every translation key defined in <code>modules/i18n/src/main/I18nKeys.scala</code>. This file can be generated automatically from the source <code>.xml</code> files by running <code>bin/trans-dump</code>.</p> <p>It defines an <code>I18nKeys</code> object with values for each translation key:</p> <pre><code>object I18nKeys {\n    val `playWithAFriend` = new I18nKey(\"playWithAFriend\")\n    // ...\n\n    object swiss {\n        val `swissTournaments` = new I18nKey(\"swiss:swissTournaments\")\n        // ...\n    }\n}\n</code></pre> <p>That object is generally imported with <code>import lila.i18n.{ I18nKeys =&gt; trans }</code> so that keys can be accessed as <code>trans.theKey</code> for values from <code>site.xml</code>. Other areas need to be specified, e.g. <code>trans.swiss.theKey</code> for <code>swiss.xml</code>, etc.</p> <p>Each key is an instance of <code>I18nKey</code> defined in <code>modules/i18n/src/main/I18nKey.scala</code> which defines everything that can be done with them:</p> <pre><code>final class I18nKey(val key: String) {\n  def apply(args: Any*)(implicit lang: Lang): RawFrag = // ...\n  def plural(count: Count, args: Any*)(implicit lang: Lang): RawFrag = // ...\n  def pluralSame(count: Int)(implicit lang: Lang): RawFrag = plural(count, count)\n\n  def txt(args: Any*)(implicit lang: Lang): String = // ...\n  def pluralTxt(count: Count, args: Any*)(implicit lang: Lang): String = // ...\n  def pluralSameTxt(count: Int)(implicit lang: Lang): String = pluralTxt(count, count)\n}\n</code></pre> <p>There are three different functions, each in two versions, one producing a fragment, i.e. for use in scalatags when generating HTML, and another producing a <code>String</code>.</p> <ul> <li>Applying a key directly as <code>trans.theKey()</code> directly gives a translated fragment. Values to replace placeholders can be passed directly as arguments: <code>trans.theKey(\"abc\", 42)</code>.</li> <li>To use plural keys you need to use <code>trans.theKey.plural(42, \"abc\", 42)</code>. The first number determines the plural version to use (i.e. \"game\" vs \"games\") and everything after that is replacing the placeholders. Note that the initial value has to be repeated in the correct position.</li> <li>For the common case when there is only one value that both determines the plural and needs to be inserted, there is <code>trans.theKey.pluralSame(42)</code>.</li> </ul> <p>And then there are the three <code>String</code> version equivalents <code>trans.theKey.txt</code>, <code>trans.theKey.pluralTxt</code> and <code>trans.theKey.pluralSameTxt</code>.</p>"},{"location":"development/translations/#what-is-implicit-lang","title":"What is <code>implicit Lang</code>?","text":"<p>All these functions have an implicit <code>Lang</code> parameter that specifies the target language to translate to when they are called. This parameter can be automatically extracted from an implicit <code>Context</code> in scope. Generally, that means adding additional <code>(implicit ctx: Context)</code> or <code>(implicit lang: Lang)</code> argument lists to all functions calling one of the translation functions, all the way up the call stack until the controller endpoints which will have an explicit <code>Context</code> available.</p>"},{"location":"development/translations/#using-translations-in-javascript","title":"Using translations in JavaScript","text":"<p>For JS, the Scala code generally passes a JSON object with <code>{ transKey: value }</code> down to the JS controller for each page. Often, a list of keys to send down is defined in <code>app/views/&lt;area&gt;/bits.scala</code> which is then converted to JSON using the <code>i18nJsObject</code> function brought into scope by an <code>import lila.app.templating.Environment._</code> (and originating in <code>app\\templating\\I18hHelper.scala</code>).</p> <p>Here's an example from the swiss tournament pages: <code>app/views/swiss.bits.scala</code></p> <pre><code>import lila.app.templating.Environment._\nimport lila.i18n.{ I18nKeys =&gt; trans }\n\n// ...\n\ndef jsI18n(implicit ctx: Context) = i18nJsObject(i18nKeys)\n\nprivate val i18nKeys = List(\n  trans.join,\n  trans.withdraw,\n  trans.youArePlaying,\n  // ...\n  trans.swiss.viewAllXRounds,\n  // ...\n).map(_.key)\n</code></pre> <p>This object is passed to the call initializing the JS controller: <code>app/views/swiss/show.scala</code></p> <pre><code>embedJsUnsafeLoadThen(s\"\"\"LichessSwiss.start(${safeJsonValue(\n  Json.obj(\n    \"data\"   -&gt; data,\n    \"i18n\"   -&gt; bits.jsI18n,\n    // ...\n)})\"\"\")\n</code></pre> <p>The JS controller then uses this JSON object to construct a <code>Trans</code> object: <code>ui/swiss/src/ctrl.ts</code></p> <pre><code>this.trans = lichess.trans(opts.i18n);\n</code></pre> <p>The <code>lichess.trans</code> function is defined in <code>ui/site/src/component/trans.ts</code>.</p>"},{"location":"development/translations/#the-trans-object","title":"The <code>Trans</code> object","text":"<p>The resulting <code>Trans</code> object provides similar functions as <code>I18nKey</code> in Scala:</p> <ul> <li><code>trans(\"theKey\", 42, \"abc\")</code> will give the translation for \"theKey\" as a <code>string</code>, replacing placeholders with <code>42</code> and <code>\"abc\"</code>.</li> <li><code>trans.noarg(\"theKey\")</code> is a fast-path for keys without placeholders</li> <li><code>trans.plural(\"theKey\", 42, 42, \"a\", \"b\", \"c\")</code> is for plural forms and the same as <code>pluralTxt</code> in Scala</li> <li>The first argument is the translation key</li> <li>The second argument is the number used to decide the plural form</li> <li>The subsequent arguments are used as replacements for the placeholders</li> <li><code>trans.vdom(\"theKey\", h(\"a\", ...))</code> can be used when the placeholders are vdom nodes and returns a list of strings and nodes.</li> <li><code>trans.vdomPlural(\"theKey\", 42, h(\"a\", 42))</code> is the same for plural forms</li> </ul>"},{"location":"development/ui/","title":"User Interface","text":"<p>The mithril or snabbdom UI modules are in <code>ui/</code>. Say we work on <code>ui/round</code>, the playing UI.</p> <p>Enable auto-recompile:</p> <pre><code>cd ui/round\nyarn run dev --watch\n</code></pre> <p>To enable auto-recompile for the .scss files:</p> <pre><code>cd ui\nyarn run gulp css\n</code></pre>"},{"location":"development/ui/#translations","title":"Translations","text":"<ol> <li>New translation keys are added in <code>translation/source/site.xml</code> in British English.</li> <li>Then regenerate translation keys for Scala: <code>bin/trans-dump</code></li> <li>Do not touch <code>translations/dest/</code>. New translations from crowdin will automatically be applied here.</li> </ol> <p>To make a new translation key available to the client JS, add the key to the appropriate page's key list.</p> <p>If you need to add a new file to <code>translation/source</code> (for example to translate a completely new page), you also need to add the name of the file (without the extension):</p> <p>In <code>bin/trans-dump</code>: here</p> <p>In <code>/build.sbt</code>: here</p> <p>For an in-depth explanation of how the whole translation system works, see How translations work.</p>"},{"location":"development/ui/#puzzles","title":"Puzzles","text":"<p>Import some puzzle data.</p>"},{"location":"development/ui/#forum","title":"Forum","text":"<p>Create the default categories.</p>"},{"location":"development/ui/#swiss","title":"Swiss","text":"<p>You need to install and run bbpPairings. Mind that Lichess uses cyanfish fork.</p> <p>To set up a swiss tournament, you need to be a team leader. For the Lichess one's to be working properly it's advised to create the team of the official Lichess swiss.</p>"},{"location":"development/ui/#insights","title":"Insights","text":"<ol> <li>Download insights sample data.</li> <li>run</li> </ol> <pre><code>mongorestore --db lichess-insight --collection insight insight.bson\n</code></pre> <ol> <li>Register an account named <code>thibault</code>.</li> <li>Either play one rated game with it or hack this function.</li> <li>Access to <code>http://localhost:9663/insights/thibault/</code></li> </ol>"},{"location":"development/ui/#font-icon-to-svg","title":"Font icon to SVG","text":"<p>Extract all fonts as SVG <code>fontforge -lang=ff -c 'Open($1); SelectWorthOutputting(); foreach Export(\"svg\"); endloop;' lichess.sf</code> Where <code>lichess.sfd</code> is https://github.com/ornicar/lila/blob/master/public/font/lichess.sfd</p>"},{"location":"development/ui/#accessibility","title":"Accessibility","text":"<p>To activate Accessibility mode on lichess, press <code>tab</code> then <code>enter</code> on the homepage.</p> <p>Most of the code is located in <code>ui/nvui</code>, and it is then loaded as a plugin.</p>"},{"location":"lila-docker/","title":"lila-docker","text":"<p>Lichess local development using Docker Compose, for developing on Mac or Linux.</p> <p>The only requirements for running on your local machine are <code>git</code> and Docker Desktop. All the other dependencies (Scala, MongoDB, Node.js, etc) are installed and run in Docker containers.</p>"},{"location":"lila-docker/#instructions","title":"Instructions","text":"<ol> <li> <p>Install Docker Desktop and have it running</p> </li> <li> <p>Clone this repo:</p> </li> </ol> <pre><code>git clone https://github.com/fitztrev/lila-docker\n</code></pre> <ol> <li>Start the services</li> </ol> <pre><code>cd lila-docker\n./lila-docker start\n</code></pre> <p>Starting new services may take 5-10 minutes. Some services will start before others and you may see errors in the logs until everything comes online.</p> <p>Lila will be the last service to complete, at which point you can visit http://localhost:8080/ to see the site.</p>"},{"location":"lila-docker/#urls","title":"URLs","text":"<p>When the services start, you can visit the following URLs:</p> Service URL Main lila instance http://localhost:8080/ Chessground demo http://localhost:8080/chessground/demo.html Mongodb manager http://localhost:8081/ API docs http://localhost:8089/ PGN Viewer http://localhost:8090/ Email inbox http://localhost:8025/ <p>Depending on which optional services you start:</p> Service URL lila-gif http://localhost:6175/image.gif?fen=4k3/6KP/8/8/8/8/7p/8 Picfit http://localhost:3001/healthcheck Elasticsearch manager http://localhost:5601/"},{"location":"lila-docker/#stopping","title":"Stopping","text":"<p>To stop the containers, for later resuming via <code>./lila-docker start</code>:</p> <pre><code>./lila-docker stop\n</code></pre> <p>To remove the containers:</p> <pre><code>./lila-docker down\n</code></pre>"},{"location":"lila-docker/scala-metals/","title":"Scala Metals","text":""},{"location":"lila-docker/scala-metals/#scala-metals-ide-helper","title":"Scala Metals (IDE helper):","text":"<ol> <li>In VS Code, open this <code>lila-docker</code> project and install the Dev Containers extension</li> <li>Cmd+Shift+P &gt; \"Dev Containers: Reopen in Container\"</li> <li>A new VS Code window will open, attached to the container instead of your host machine</li> <li>File &gt; Open Folder &gt; \"/workspaces/lila-docker/repos/lila\" (or whichever Scala project you want to work on)</li> <li>Install + Enable the Scala Metals extension (Cmd+Shift+X &gt; \"Scala (Metals)\")</li> <li>Cmd+Shift+P &gt; \"Metals: Import build\"</li> </ol> <p>Once the build has been imported, you should have code completion, go to definition, etc when you open a Scala file.</p>"},{"location":"lila-docker/usage/","title":"Usage","text":""},{"location":"lila-docker/usage/#usage","title":"Usage","text":""},{"location":"lila-docker/usage/#scala-development","title":"Scala development:","text":"<p>To restart lila (after making changes to any Scala code):</p> <pre><code>docker compose restart lila\n</code></pre>"},{"location":"lila-docker/usage/#ui-jscss-development","title":"UI (JS/CSS) development:","text":"<p>To watch for Typescript/SCSS changes and automatically recompile:</p> <pre><code>docker compose run --rm ui bash -c \"/lila/ui/build -w\"\n</code></pre>"},{"location":"lila-docker/usage/#to-add-translation-keys","title":"To add translation keys:","text":"<p>After modifying a <code>translation/source/*.xml</code> file, run:</p> <pre><code>docker compose run --rm ui bash -c \"/lila/bin/trans-dump\"\n</code></pre>"},{"location":"lila-docker/usage/#code-formatting","title":"Code formatting:","text":"<pre><code>docker compose run --rm ui bash -c \"cd /lila &amp;&amp; pnpm install &amp;&amp; pnpm run format\"\ndocker compose run --rm ui bash -c \"cd /chessground &amp;&amp; pnpm install &amp;&amp; pnpm run format\"\ndocker compose run --rm ui bash -c \"cd /pgn-viewer &amp;&amp; pnpm install &amp;&amp; pnpm run format\"\n\n# sbt scalafmtAll\ndocker run --rm -v $(pwd)/repos/lila:/lila \\\n    sbtscala/scala-sbt:eclipse-temurin-focal-17.0.8.1_1_1.9.6_3.3.1 \\\n    bash -c \"cd /lila &amp;&amp; sbt scalafmtAll\"\n</code></pre>"},{"location":"lila-docker/usage/#berserk-python-library","title":"Berserk (Python library):","text":"<p>To install the development version of Berserk and run a sample script against your local development site:</p> <pre><code>docker run --rm -v $(pwd)/repos/berserk:/berserk -v $(pwd)/scripts:/scripts python:latest \\\n    bash -c \"cd /berserk &amp;&amp; pip install -e . &amp;&amp; python /scripts/berserk-example.py\"\n</code></pre>"},{"location":"lila-docker/usage/#scalachess","title":"Scalachess:","text":"<p>If you're making changes to the Scalachess library, you can have lila use it instead of the published Maven version:</p> <ol> <li>Update the <code>build.sbt</code> file in the scalachess repo:</li> </ol> <pre><code>-  ThisBuild / version           := \"15.6.7\"\n+  ThisBuild / version           := \"my-test-1\"  # give it a custom version\n</code></pre> <ol> <li>Update the <code>Dependencies.scala</code> file in the lila repo:</li> </ol> <pre><code>-  val chess = \"org.lichess\" %% \"scalachess\" % \"15.6.7\"\n+  val chess = \"org.lichess\" %% \"scalachess\" % \"my-test-1\"\n</code></pre> <ol> <li>Publish the local scalachess changes and restart lila:</li> </ol> <pre><code>docker compose exec lila bash -c \"cd /scalachess &amp;&amp; sbt publishLocal\"\ndocker compose restart lila\n</code></pre> <p>Other Scalachess commands:</p> <pre><code>## compile\ndocker run --rm -v $(pwd)/repos/scalachess:/mnt \\\n    sbtscala/scala-sbt:eclipse-temurin-focal-17.0.8.1_1_1.9.6_3.3.1 \\\n    bash -c \"cd /mnt &amp;&amp; sbt compile\"\n\n## test\ndocker run --rm -v $(pwd)/repos/scalachess:/mnt \\\n    sbtscala/scala-sbt:eclipse-temurin-focal-17.0.8.1_1_1.9.6_3.3.1 \\\n    bash -c \"cd /mnt &amp;&amp; sbt testKit/test\"\n\n## package\ndocker run --rm -v $(pwd)/repos/scalachess:/mnt \\\n    sbtscala/scala-sbt:eclipse-temurin-focal-17.0.8.1_1_1.9.6_3.3.1 \\\n    bash -c \"cd /mnt &amp;&amp; sbt package\"\n</code></pre>"},{"location":"lila-docker/usage/#bbppairings","title":"bbpPairings:","text":"<pre><code>docker build -f docker/bbpPairings.Dockerfile . -t bbppairings\ndocker run --rm -v $(pwd)/repos:/mnt bbppairings bash -c \"\\\n    git clone https://github.com/cyanfish/bbpPairings \\\n    &amp;&amp; cd bbpPairings \\\n    &amp;&amp; make \\\n    &amp;&amp; chmod +x bbpPairings.exe \\\n    &amp;&amp; cp bbpPairings.exe /mnt\"\n\n## verify\n./repos/bbpPairings.exe\n</code></pre>"},{"location":"lila-docker/usage/#developing-chessground-locally","title":"Developing Chessground locally","text":"<p>By default, your local lila instance will use the version of chessground that is published to npm. If you want to make changes to that library and see them reflected in your local lila instance, you can do the following:</p> <ol> <li>Update the <code>package.json</code> in the <code>lila</code> repo:</li> </ol> <pre><code>\"dependencies\": {\n-  \"chessground\": \"^8.3.11\",\n+  \"chessground\": \"link:/chessground\",\n}\n</code></pre> <ol> <li>Start the chessground compiler in watch mode:</li> </ol> <pre><code>docker compose run --rm ui bash -c \"cd /chessground &amp;&amp; pnpm install &amp;&amp; pnpm run compile --watch\"\n</code></pre> <ol> <li>Start the lila ui build in watch mode:</li> </ol> <pre><code>docker compose run --rm ui bash -c \"/lila/ui/build -w\"\n</code></pre> <p>Then you can see the updated chessground demo at http://localhost:8080/chessground/demo.html and when you refresh lila, it will use the local copy of chessground.</p>"},{"location":"lila-docker/usage/#developing-pgn-viewer-locally","title":"Developing PGN Viewer locally","text":"<p>To re-compile the PGN Viewer after making changes:</p> <pre><code>docker compose run --rm ui bash -c \"cd /pgn-viewer &amp;&amp; pnpm run sass-dev &amp;&amp; pnpm run bundle-dev\"\n</code></pre> <p>See the changes on the PGN Viewer demo page: http://localhost:8090/</p>"},{"location":"lila-gitpod/","title":"lila-gitpod","text":"<p>You can use Gitpod (a free, online, VS Code-like IDE) for creating a development site of Lichess.org. With a single click, it will launch a workspace and automatically:</p> <ul> <li>Clone the necessary Lichess repositories</li> <li>Install all the dependencies</li> <li>Seed your database with test data</li> <li>Start a development site</li> </ul> <p></p>"},{"location":"lila-gitpod/#what-do-you-need","title":"What do you need?","text":"<ol> <li>A Github account</li> <li>A web browser (like Chrome or Firefox)</li> </ol>"},{"location":"lila-gitpod/#getting-started","title":"Getting Started","text":"<p>Click here to start a workspace:</p> <p></p> <p>It will take about 8-10 minutes. You can watch the progress in the terminal windows that automatically open.</p>"},{"location":"lila-gitpod/api-testing/","title":"API Testing","text":"<p>Consider using a lila-gitpod workspace while you develop your API integration before pointing to the production Lichess.org.</p> <ul> <li>Avoid getting rate-limited</li> <li>Don't worry about messing anything up</li> <li>If developing a bot, keep test games out of your bot's game history</li> </ul>"},{"location":"lila-gitpod/api-testing/#setup","title":"Setup","text":"<ol> <li>Create your workspace</li> <li>Make port 8080 public, so you can access it from the client.</li> </ol>"},{"location":"lila-gitpod/api-testing/#bot-development","title":"Bot Development","text":"<ol> <li>Create an account for your bot</li> <li> <p>Point your bot to use your workspace's development site instead of <code>lichess.org</code></p> <p>Using lichess-bot</p> <p>If you're using the lichess-bot project, set the <code>url</code> value in <code>config.yml</code> to your development site.</p> </li> </ol>"},{"location":"lila-gitpod/api-testing/#client-development","title":"Client Development","text":"<p>If you're using the Lichess berserk Python client, you can point it to your workspace's development site instead of <code>lichess.org</code>.</p> <pre><code>import berserk\n\nclient = berserk.Client(base_url=\"https://your-gitpod-instance.gitpod.io\")\n\nprofile = client.users.get_by_id('bobby')\nprint(profile)\n</code></pre>"},{"location":"lila-gitpod/contributing/","title":"Contributing your changes from your workspace","text":""},{"location":"lila-gitpod/contributing/#format-your-code","title":"Format your code","text":"<p>Before submitting any pull requests, run the linters:</p> <pre><code>sbt scalafmtAll\npnpm run format\n</code></pre>"},{"location":"lila-gitpod/contributing/#submitting-a-pull-request","title":"Submitting a Pull Request","text":"<p>If you make code changes, you can submit a Pull Request directly from your workspace.</p> <p>Using the Source Control menu, you can create a branch and commit your files. Then using the Github menu, you can submit a Pull Request.</p>"},{"location":"lila-gitpod/extensions/","title":"Extensions","text":"<p>You can install extensions within your workspace to make development easier. Browse and add them in the Extensions menu to the left of your workspace.</p> <p>These are a couple that might be helpful:</p>"},{"location":"lila-gitpod/extensions/#mongodb-for-vscode","title":"MongoDB for VSCode","text":"<p>This extension will let you browse your local Mongo database to see its structure and data.</p> <p>Use connection string: <code>mongodb://localhost</code></p>"},{"location":"lila-gitpod/extensions/#scala-metals","title":"Scala Metals","text":"<p>Metals is a Scala language server that provides rich IDE features. If you're working with Scala files, it can be helpful for:</p> <ul> <li>Definitions/signatures on hover</li> <li>Autocomplete parameter hints</li> <li>Finding references</li> </ul>"},{"location":"lila-gitpod/optional-services/","title":"Optional Services","text":"<p>By default, your lila-gitpod workspace will start with the basic services required to run lila.</p> <p>Depending on what you're working on, you may want to enable some of these additional services.</p>"},{"location":"lila-gitpod/optional-services/#stockfish","title":"Stockfish","text":"<p>The Stockfish engine is used for a couple of things within lila:</p> <ul> <li>\"Request a Computer Analysis\" for post-game analysis</li> <li>\"Play with the Computer\"</li> </ul> <p>To enable:</p> <ol> <li>Compile the fishnet client:</li> </ol> <pre><code>cd /workspace/fishnet/\ncargo build\n</code></pre> <ol> <li>For \"Request a Computer Analysis\", connect Fishnet to port 9663:</li> </ol> <pre><code>cargo run -- --endpoint http://localhost:9663/fishnet/ --max-backoff 1s\n</code></pre> <ol> <li>For \"Play with the Computer\", start the <code>lila-fishnet</code> service:    <pre><code>cd /workspace/lila-fishnet/\nsbt run -Dhttp.port=9665\n</code></pre>    Then, connect Fishnet to port 9665. In a separate terminal:    <pre><code>cd /workspace/fishnet/\ncargo run -- --endpoint http://localhost:9665/fishnet/ --max-backoff 1s\n</code></pre></li> </ol>"},{"location":"lila-gitpod/optional-services/#external-engine","title":"External Engine","text":"<p>The broker for external engine has its own service and port (9666). It must be started separately if you wish to use it.</p> <pre><code>git clone https://github.com/lichess-org/lila-engine.git /workspace/lila-engine\ncd /workspace/lila-engine\nLILA_ENGINE_LOG=lila_engine=debug,tower_http=debug cargo run -- --bind 127.0.0.1:9666\n</code></pre> <p>You can then connect an external engine client to port 9666.</p>"},{"location":"lila-gitpod/optional-services/#email-debugging","title":"Email Debugging","text":"<p>Lichess sends various emails (welcome, password reset, move notifiations for correspondence games, etc).</p> <p>By default, any emails from your development site will not really be sent, and only show in the logs of the <code>lila</code> terminal.</p> <p>If you're working on emails, you may find it helpful to use MailHog to debug them and get a more inbox-type view where you can see the rendered HTML emails.</p> <ol> <li>Append these 2 lines to <code>/workspace/lila/conf/application.conf</code>:</li> </ol> <pre><code>mailer.primary.mock = false\nmailer.primary.tls = false\n</code></pre> <ol> <li> <p>Restart lila to apply the config changes (see Recompiling lila)</p> </li> <li> <p>Then start MailHog:    <pre><code>go get github.com/mailhog/MailHog\nsudo ~/go/bin/MailHog -smtp-bind-addr 0.0.0.0:587\n</code></pre></p> </li> </ol> <p>When you trigger an email to be sent, it will now show in the MailHog UI which is available at the URL when you type <code>gp url 8025</code> in a terminal.</p>"},{"location":"lila-gitpod/optional-services/#lila-gif","title":"lila-gif","text":"<p>The lila-gif service will enable the functionality:</p> <ul> <li>Game Analysis &gt; Share &amp; export &gt; Game as GIF</li> <li>Game Analysis &gt; Share &amp; export &gt; Screenshot current position</li> </ul> <pre><code>git clone https://github.com/lichess-org/lila-gif.git /workspace/lila-gif\ncd /workspace/lila-gif\ncargo run\n</code></pre> <p>You can verify it's working by running the following commands in another terminal:</p> <pre><code>curl http://localhost:6175/image.gif?fen=4k3/6KP/8/8/8/8/7p/8 --output image.gif\nopen image.gif\n</code></pre>"},{"location":"lila-gitpod/optional-services/#picfit","title":"picfit","text":"<p>Picfit is used to resize blog and streamer page images.</p> <pre><code>git clone https://github.com/thoas/picfit.git /workspace/picfit\ncd /workspace/picfit\nmake build\necho '{\"port\": 3001}' &gt; config.json\n./picfit -c config.json\n</code></pre> <p>You can verify it's working going to the URL that's returned when you type <code>echo $(gp url 3001)/healthcheck</code> in a terminal.</p>"},{"location":"lila-gitpod/optional-services/#scalachess","title":"scalachess","text":"<p>Scalachess will automatically be installed from the maven source. But if you wish to make changes and develop locally:</p> <pre><code>git clone https://github.com/lichess-org/scalachess.git /workspace/scalachess\ncd /workspace/scalachess\nsbt publishLocal\n</code></pre>"},{"location":"lila-gitpod/optional-services/#pgn-viewer-chessground","title":"pgn-viewer + chessground","text":"<p>PGN Viewer and Chessground will automatically be installed from NPM. You can install them locally if you wish to make changes and develop locally:</p> <pre><code>git clone https://github.com/lichess-org/pgn-viewer.git /workspace/pgn-viewer\ngit clone https://github.com/lichess-org/chessground.git /workspace/chessground\n\ncd /workspace/lila/ui/site\npnpm link /workspace/pgn-viewer\npnpm link /workspace/chessground\n</code></pre>"},{"location":"lila-gitpod/sharing/","title":"Sharing","text":""},{"location":"lila-gitpod/sharing/#making-your-development-site-public","title":"Making your development site public","text":"<p>By default, your Lichess dev site is only accessible by you. If you want to make it available to others or if you're developing an API client application, you can make port <code>8080</code> public.</p> <p>Click the PORTS tab above your terminal, then change the port visibility to public for <code>8080</code>. You can keep the others private.</p> <p>Attention</p> <p>Your workspace will automatically stop after you've been idle for 30 minutes, at which point your URL will return an error.</p>"},{"location":"lila-gitpod/sharing/#collaborating","title":"Collaborating","text":"<p>It is also possible to share your workspace to work on the same code with someone else.</p> <p>See Gitpod's documentation for more on sharing a running workspace.</p>"},{"location":"lila-gitpod/usage/","title":"Usage","text":""},{"location":"lila-gitpod/usage/#your-development-site","title":"Your Development Site","text":"<p>To get the URL for your development site, in a new terminal, type:</p> <pre><code>gp url 8080\n</code></pre> <p>Once lila is running, your dev site will be available. You can check the status on the PORTS tab above your terminal.</p>"},{"location":"lila-gitpod/usage/#test-accounts","title":"Test accounts","text":"<p>Your database is preloaded with a number of test accounts:</p> <pre><code>lichess  /  password   ROLE_SUPER_ADMIN\nadmin    /  password   ROLE_ADMIN\nbobby    /  password\nmary     /  password\n</code></pre> <p>To see all other test accounts (admins, titled accounts, flagged accounts, bots, etc):</p> <pre><code>mongosh lichess --quiet --file /workspace/lila-gitpod/scripts/mongodb/users.js\n</code></pre>"},{"location":"lila-gitpod/usage/#navigating-the-code","title":"Navigating the code","text":"<p>The main Lichess code repositories have automatically been added to your workspace. You can find them at:</p> <pre><code>ls /workspace\n</code></pre> <p>To open them in your workspace:</p> <pre><code>open -r /workspace/lila      # open main lila repository\nopen -r /workspace/lila-ws   # open websocket repository\n</code></pre>"},{"location":"lila-gitpod/usage/#recompiling-lila","title":"Recompiling lila","text":"<p>When you edit a scala file, you'll have to restart <code>bloop</code>. Go to the <code>lila</code> terminal, type <code>Ctrl+c</code> to stop the running process, then rerun:</p> <pre><code>bloop run lila -m lila.app.Lila\n</code></pre> <p>Bloop will detect any changed files, recompile them, then start lila.</p>"},{"location":"lila-gitpod/usage/#recompiling-frontend-assets","title":"Recompiling frontend assets","text":"<p>If you're working on TypeScript or SCSS files, <code>./ui/build -w</code> will automatically detect the changes and recompile the assets. You can see the output in the <code>ui</code> terminal.</p>"},{"location":"lila-gitpod/usage/#updating-routes","title":"Updating Routes","text":"<p>If you edit the <code>conf/routes</code> file, you'll need to update the route cache. Bloop will not automatically detect changes to this file.</p> <p>Stop lila (see Recompiling lila above), then run:</p> <pre><code>cd /workspace/lila\n./lila playRoutes\n</code></pre>"},{"location":"lila-gitpod/usage/#stopping-your-workspace","title":"Stopping Your Workspace","text":"<p>Done for the day or make a mistake and want to start over? No problem.</p> <pre><code>gp stop\n</code></pre> <p>Or just leave it and it'll shut down when it's been idle for 30 minutes.</p>"},{"location":"local-setup/","title":"Setup","text":"<p>The following instructions outline how to set up your development environment for starting development on Lichess. The instructions are aimed to be agnostic of the platform the stack is installed on, so a working knowledge of the specifics of your GNU/Linux distribution or other such Unix-based operating system is assumed.</p>"},{"location":"local-setup/#getting-help","title":"Getting Help","text":"<p>If you get stuck during the installation process the most suitable place to seek help is the <code>#lichess-dev-onboarding</code> channel on Discord (https://discord.gg/lichess). The main developer of Lichess (thibault) can be found there as well as several people who have successfully installed the stack.</p>"},{"location":"local-setup/#stream-recordings","title":"Stream recordings","text":""},{"location":"local-setup/#prerequisites","title":"Prerequisites","text":"<p>Before beginning, please make sure you have the following tools installed, using your favorite package manager to install them where applicable.</p>"},{"location":"local-setup/#hardware","title":"Hardware","text":"<ul> <li>At least 4 GB of RAM</li> <li>A CPU with 64-bit architecture.</li> </ul>"},{"location":"local-setup/#tools-and-dependency-managers","title":"Tools and dependency managers","text":"<ul> <li><code>git</code></li> <li><code>java</code> (JDK &gt;= 17, type <code>java --version</code> to see if you need to update or use jenv if you need multiple jdk versions)</li> <li><code>cs</code> (cs &gt;= 2, installing coursier will provide sbt as well)</li> <li><code>node</code> (node &gt;= 14.3, install via NVM preferred) or (install node only)</li> <li><code>pnpm</code> (pnpm 8.x, type <code>npm i -g pnpm</code> after installing node) or (see the pnpm homepage)</li> </ul>"},{"location":"local-setup/#running-infrastructure","title":"Running infrastructure","text":"<ul> <li><code>mongodb</code> (5.1 &gt;= mongo &gt;= 4.2, instructions, WSL2)</li> <li>For WSL2, you might want to manually create the default <code>/data/db</code> directory and give ownership permissions to your user (<code>sudo chown -R `id -un` /data/db</code>). If <code>sudo service mongod start</code> does not work, you may want to open a terminal and run <code>mongod</code> as super-user.</li> <li><code>redis</code></li> </ul> <p>Alternatively, if you have setup docker-compose on your machine, write a <code>docker-compose.yml</code> file:</p> <pre><code>version: \"3.3\"\nservices:\n  redis:\n    image: redis:6-alpine\n    ports:\n      - 6379:6379\n  mongo:\n    image: mongo:5.0\n    restart: always\n    container_name: lila_mongo\n    ports:\n      - 27017:27017\n    volumes:\n      # use `docker exec -it lila_mongo bash` to get a shell inside mongo\n      # container. Directory containing this docker-compose.yml will be mounted\n      # as /host inside container so you can import db dumps, etc.\n      - .:/host\n      - lila_mongo_data:/data/db\n\nvolumes:\n  lila_mongo_data: {}\n</code></pre> <p>and spin up a <code>redis</code> and <code>mongodb</code> instance with:</p> <pre><code>docker-compose up\n</code></pre>"},{"location":"local-setup/#installation","title":"Installation","text":""},{"location":"local-setup/#setup-lila","title":"Setup lila","text":"<pre><code>git clone --recursive https://github.com/lichess-org/lila.git\ncd lila\nmongosh lichess &lt; bin/mongodb/indexes.js # creates database indexes\n# or `mongosh mongodb://localhost:27017/lichess &lt; lila/bin/mongodb/indexes.js` if you use docker\nui/build # builds client. -h for help and -w for incremental watch mode.\n./lila # starts the SBT console\n</code></pre> <p>Once the console has booted, you will see a <code>lila&gt;</code> prompt. Type <code>compile</code> and sit back. The full compilation takes 5 minutes on GitHub CI servers.</p> <p>When it's done, type <code>run</code> to start the HTTP server. Then open http://127.0.0.1:9663 in your browser.</p> <p>Read more about the SBT console commands.</p>"},{"location":"local-setup/#setup-websockets","title":"Setup websockets","text":"<p>If you need websockets (which you probably do):</p> <pre><code>git clone https://github.com/lichess-org/lila-ws.git\ncd lila-ws\nsbt run -Dcsrf.origin=http://localhost:9663\n</code></pre>"},{"location":"local-setup/#ui-dev-tip","title":"UI dev tip","text":"<p>Run <code>pnpm add-hooks</code> to configure the lila git workspace to format staged files with prettier prior to every commit. You may also install a prettier plugin in your code editor to format on save. All source files with the <code>ts</code>, <code>js</code>, or <code>json</code> extensions must be prettified.</p> <p>Watch client typescript and scss code automatically using <code>ui/build -w</code>. Changes you make to source files will be detected, compiled, and available in your browser after a hard refresh. You may also disable asset caching in your browser inspector so that ordinary page reloads will pick up changes as well.</p>"},{"location":"local-setup/#recommended-seed-database","title":"Recommended: Seed database","text":"<p>You can use https://github.com/lichess-org/lila-db-seed to seed your local database with dummy data.</p> <pre><code>git clone https://github.com/lichess-org/lila-db-seed\n</code></pre> <p>For users, games, puzzles, teams, forums, blogs, game histories, timelines, activity, and more - use the <code>spamdb.py</code> script to populate your database (requires python 3.9+).</p> <pre><code>pip3 install pymongo\npython3 lila-db-seed/spamdb/spamdb.py --help\n</code></pre> <p>Or, you may install game &amp; puzzle data only:</p> <pre><code>cd lila-db-seed\nmongorestore dump\n</code></pre>"},{"location":"local-setup/#optional-setup-stockfish-analysis","title":"Optional: Setup Stockfish analysis","text":"<p>Start a fishnet client for analysis (requires a recent Rust toolchain to build from source, alternatives):</p> <pre><code>git clone --recursive https://github.com/lichess-org/fishnet.git\ncd fishnet\ncargo run -- --endpoint http://localhost:9663/fishnet/\n</code></pre>"},{"location":"local-setup/#optional-setup-play-with-the-computer","title":"Optional: Setup \"Play with the computer\"","text":"<p>lila-fishnet enables playing vs Stockfish (not needed for analysis):</p> <pre><code>git clone https://github.com/lichess-org/lila-fishnet.git\ncd lila-fishnet\nsbt run -Dhttp.port=9665\n</code></pre> <p>You will also need a client. Start a fishnet client for play against the machine (requires a recent Rust toolchain to build from source, alternatives):</p> <pre><code>git clone --recursive https://github.com/lichess-org/fishnet.git\ncd fishnet\ncargo run -- --endpoint http://localhost:9665/fishnet/\n</code></pre>"},{"location":"local-setup/#optional-setup-search","title":"Optional: Setup Search","text":"<p>Follow these instructions to enable game, forum, team, and study search on Lila</p>"},{"location":"local-setup/#development","title":"Development","text":"<p>Learn more about using <code>pnpm</code> and <code>ui/build</code> to work on client code</p>"},{"location":"local-setup/#bloop-based-setup-for-hacking-lila-scala-code","title":"Bloop based setup for hacking lila scala code","text":"<p>Set up bloop for quick builds and IDE features.</p>"},{"location":"local-setup/#code-formatting","title":"Code formatting","text":"<p>These repositories use scalafmt for Scala and prettier for everything else.</p> <p>Please install scalafmt for your editor, or run <code>scalafmtAll</code> in the sbt console before submitting code.</p> <p>Likewise, pick a plugin for prettier (coc-prettier is good for nvim), or type <code>pnpm format</code> in the project root.</p>"},{"location":"local-setup/#contributing","title":"Contributing","text":"<p>Collaboration on the website front and back end is managed through the lila GitHub repo. You may contribute using the GitHub Pull Request mechanism. Assuming you have <code>git</code> installed, a GitHub account with authentication in place, a fork of the lila repo - the following commands will get you started.</p> <pre><code>  git clone --single-branch --filter=blob:none https://github.com/YOUR-USERNAME/lila # get the sources\n  # git clone --single-branch --filter=blob:none git@github.com:YOUR-USERNAME/lila.git # operate over SSH\n  git remote add upstream https://github.com/lichess-org/lila # add a ref for the parent repo\n  git checkout -b YOUR-BRANCH # branches are human readable &amp; dash separated, otherwise your choice\n  # make your edits to sources\n  git add -A # stages all changes\n  git commit -m 'your commit message' # commit staged changes to git on your host\n  # you might want to rebase against master and resolve conflict(s) before pushing\n  git push origin YOUR-BRANCH # push the state of your local git to your fork.\n  # notice that git push's output contains a URL you can visit to create your Pull Request\n</code></pre> <p>A couple git configs that might ease your git workflow:</p> <ul> <li>git config branch.autoSetupMerge inherit</li> <li>git config push.autoSetupRemote true</li> <li>git config push.default current</li> </ul> <p>If you don't want to use the command line, I don't blame you! Consider downloading and getting acquainted with GitHub Desktop for Windows, Mac, or Linux. It's a basic UI with menus and things to click and will walk you through forking a project for the first time. Most will find it less intimidating than the command line procedures. But if you want even more command line, there is a dedicated GitHub CLI for you to try out!</p>"},{"location":"local-setup/#other-miscellaneous-tips","title":"Other miscellaneous tips","text":"<p>Here are some hints for working on various parts of the system.</p> <p>Spamdb creates a <code>lichess</code> admin user and a number of mod accounts listed at the top of <code>lila-db-seed/spamdb/data/uids.txt</code>. If you want to make an admin user manually, connect to the lichess db with <code>mongo lichess</code> and run</p> <pre><code>db.user4.update({ _id: \"your_id\" }, {$set: {roles: [\"ROLE_SUPER_ADMIN\"]}})\n</code></pre> <p>With <code>your_id</code> being the username in lowercase.</p> <p>Installation and running notes from a new lichess-dev contributor, with detailed installation command line log and tips for running (e.g., in order to access lichess-dev from an outside system): https://github.com/keaaw/howto/blob/main/lichess-dev.md</p>"},{"location":"local-setup/#alternatives","title":"Alternatives","text":""},{"location":"local-setup/#docker","title":"Docker","text":"<p>Here is a Docker setup that allows running lila and all services required for it in a Docker container. Running in Docker simplifies setup and guarantees that your development environment will perfectly match that of anyone else who uses that setup, eliminating the \"it works on my machine\" phenomena. However, it is always more performant to run any project directly on its host machine.</p>"},{"location":"local-setup/#intellij-ide-instructions-need-updating","title":"IntelliJ IDE (instructions need updating)","text":"<p>Here is a guide on how to set up lila with the IntelliJ IDE.</p>"},{"location":"local-setup/#troubleshooting","title":"Troubleshooting","text":"<ul> <li><code>[PrimaryUnavailableException$: MongoError['No primary node is available!']]</code></li> </ul> <p>Make sure mongod is running, check <code>/var/log/mongo/mongod.log</code> for errors.   It might not start if you have too little free space (might need 3GB), or if there is a previous lock file that hasn't been cleaned up (maybe try removing <code>/var/lib/mongodb/mongod.lock</code>)</p> <ul> <li>Can't create games</li> </ul> <pre><code>[ERROR] p.c.s.n.PlayDefaultUpstreamHandler Cannot invoke the action\njava.lang.ArrayIndexOutOfBoundsException: 101\n</code></pre> <p>Check <code>mongo --version</code>, and that is satisfies the requirement at the top of this page.</p> <ul> <li><code>java.util.concurrent.TimeoutException: Future timed out after [5 seconds]</code></li> </ul> <p>Check that MongoDB is running. Restart lila, if it was started before MongoDB.   On OS X, the connection timeout might be needed to be increased initially (5 seconds could be too short for a cold start). See #6718.</p> <ul> <li>Mongo error when Lila running</li> </ul> <pre><code>[error] reactivemongo.api.Cursor - fails to send request\nreactivemongo.core.errors.DatabaseException$$anon$1: DatabaseException['error processing query: ns=lichess.challenge limit=50Tree: $and\n</code></pre> <p>or similar exceptions due to missing indexes: Run <code>mongo lichess bin/mongodb/indexes.js</code> again.</p> <ul> <li>Mongo error when importing games</li> </ul> <pre><code>DatabaseException['cannot insert document because it exceeds 180 levels of nesting' (code = 15)]?\n</code></pre> <p>In <code>/etc/mongodb.conf</code>:</p> <pre><code>setParameter:\n  maxBSONDepth: 999\n</code></pre> <ul> <li><code>sbt</code> prints <code>Killed</code> and exits</li> </ul> <p>Most likely there was not enough free RAM to compile lila.</p>"},{"location":"local-setup/bloop/","title":"Bloop for hacking lila scala code","text":""},{"location":"local-setup/bloop/#note-much-of-this-section-is-out-of-date-sbt-is-now-a-metals-build-server-and-many-prefer-it-to-bloop","title":"NOTE - Much of this section is out of date. Sbt is now a metals build server, and many prefer it to bloop.","text":"<p>bloop is a build server. It's the best way to work on lila.</p> <p>Install it with your package manager and create a userland systemd service for it.</p> <pre><code>systemctl --user enable bloop\nsystemctl --user start bloop\n</code></pre> <p>After being set up (<code>sbt bloopInstall</code>), bloop can be used to build lila (<code>bloop compile lila</code>) and run it (<code>bloop run lila -m lila.app.Lila -c /path/to/lila/.bloop</code>).</p> <p>I like to run my local lila as a systemd service, and to restart it by pressing F1. I also have a service notifying me when the restart completes or fail.</p> <p>You can interface bloop with your text editor using scala metals. You gain full IDE support: incremental compilation, warning and error reports, jump to definition, global renaming, etc. This supports vim, emacs, atom, visual studio, sublime and more. I highly recommend using it.</p> <p>For details about my setup and vim configs, checkout my dotfiles repository.</p> <p></p> <p>bloop will also happily compile and run scalachess, lila-ws, lila-fishnet and probably any scala project.</p>"},{"location":"local-setup/bloop/#known-issues","title":"Known issues","text":"<ul> <li>bloop doesn't know about translation xmls. When one is modified, you need to do <code>bloop clean i18n</code> from the project root and restart lila to pick it up.</li> <li>bloop doesn't watch and recompile playframework routes. Until we find a way to fix that (can you help?), the workaround after editing <code>conf/routes</code> is to run <code>sbt playRoutes</code>.</li> <li>The bloop CLI does not currently install via homebrew on M1 Macs. However, you should still be able to install bloop (non-CLI) by installing Metals with VSCode. Note that you will not be able to run bloop commands from the terminal.</li> </ul>"},{"location":"local-setup/db/","title":"Running spamdb","text":"<p>Download from GitHub</p> <p>python3.9+ and the pymongo module are both required. If you don't have python3, use your package manager or the downloads page to install it, then get pip3 and pymongo with command line:</p> <pre><code>python -m ensurepip --upgrade\n# NOTE - On windows it might be \"py -m ensurepip --upgrade\"\npip3 install pymongo\n</code></pre> <p>The lila-db-seed/spamdb/spamdb.py script can do a few things. Usage help:</p> <pre><code>cd spamdb\npython3 ./spamdb.py --help\n</code></pre> <p>Usually, the script will generate a new set of data from inputs in the provided arguments as well as the spamdb/data directory. This data will be merged into your running mongodb instance at 127.0.0.1:27071 by default. To customize connection details use the --uri argument. Set the password for your users with the --password flag (otherwise they will default to \"password\"). Set the default background in user prefs with --user-bg (default is dark mode, use 400 for transparency). For other options see spamdb.py --help. Add, remove, or modify entries to the various .txt files in the data directory if you want to customize fluffy stuff.</p>"},{"location":"local-setup/db/#do-consider-editing-uidstxt-to-give-the-mod-users-different-passwords-than-the-default-if-your-dev-instance-will-be-exposed-to-others","title":"Do consider editing uids.txt to give the mod users different passwords than the default if your dev instance will be exposed to others.","text":""},{"location":"local-setup/db/#special-users","title":"Special users:","text":"<ul> <li>lichess - ROLE_SUPER_ADMIN</li> <li>admin - ROLE_ADMIN</li> <li>shusher - ROLE_SHUSHER</li> <li>cheat-hunter - ROLE_CHEAT_HUNTER</li> <li>timeout-mod - ROLE_TIMEOUT_MOD</li> <li>puzzle-curator - ROLE_PUZZLE_CURATOR</li> <li>api-hog - ROLE_API_HOG (this guy is useful for api testing, both server and clients)</li> <li>troll - marked as troll</li> <li>bot - marked as bot</li> <li>kid - they're just children, how could you checkmate children?</li> <li>wide - 20 W's in visible username, WGM title, and a patron to test css formatting for extremely wide usernames.</li> <li>and assorted others, student, coach, see spamdb/modules/user.py</li> </ul>"},{"location":"local-setup/db/#normal-users","title":"Normal users:","text":"<p>The normal users have all the data. This includes notifications, ratings, follows, game histories, activity, timelines, blogs, forums, teams, tournaments. Their usernames can be found and customized in data/uids.txt. Specify user/password to set individual passwords</p>"},{"location":"local-setup/db/#caveats","title":"Caveats:","text":"<p>There are no indices for game or forum search yet. This will be fixed never/soon.</p>"},{"location":"local-setup/intellij/","title":"intellij","text":"<p>This page shows you how to set up <code>lila</code> on an Ubuntu Linux machine with IntelliJ IDEA.</p> <p>With this setup as a newcomer to Scala and SBT, you will greatly benefit from powerful features like autocompletion, library dependency management, code formatting, debugging functionalities and many more things.</p>"},{"location":"local-setup/intellij/#prerequisites","title":"Prerequisites","text":"<ul> <li>Ubuntu Linux</li> <li>IntelliJ IDEA</li> <li>git</li> <li>JDK</li> </ul> <p>Optionally (for an easy <code>redis</code> and <code>mongodb</code> setup): docker-compose</p>"},{"location":"local-setup/intellij/#instructions","title":"Instructions","text":""},{"location":"local-setup/intellij/#scala-plugin","title":"Scala plugin","text":"<p>Install the official Scala plugin</p> <p></p>"},{"location":"local-setup/intellij/#clone-the-repositories","title":"Clone the repositories","text":"<pre><code>git clone --recursive https://github.com/lichess-org/lila.git\ngit clone https://github.com/lichess-org/lila-ws.git\n</code></pre>"},{"location":"local-setup/intellij/#import-the-project","title":"Import the project","text":"<p>Thanks to the build.sbt file in the root folder, IntelliJ is smart enough to automatically detect the project as an SBT Scala project. The import should set up your project correctly:</p> <p></p> <p>Dependencies should be installed automatically:</p> <p></p> <p>Folder and project structure should be detected automatically:</p> <p></p> <p>You will be asked to use the default code formatter. Please choose <code>scalafmt</code>:</p> <p></p> <p>Repeat for the <code>lila-ws</code> project.</p>"},{"location":"local-setup/intellij/#using-sbt","title":"Using SBT","text":"<p>Working with the IDE and all its SBT features directly instead of the pure command line requires us to skip the ./lila SBT wrapper functionalities. We have to manually create our configurations once:</p> <pre><code>cp .sbtopts.default .sbtopts\ncp conf/application.conf.default conf/application.conf\n</code></pre> <p>There are two integrated SBT tools you would want to use:</p> <ol> <li>SBT Tool window</li> <li>SBT Shell</li> </ol> <p></p> <p></p>"},{"location":"local-setup/intellij/#infrastructure","title":"Infrastructure","text":"<p>Instead of directly installing redis and MongoDB as services on your machine, you could spin up a dockerized version instead:</p> <p>Write a <code>docker-compose.yml</code> file with those basic contents:</p> <pre><code>version: \"3.3\"\nservices:\n  redis:\n    image: \"redis:alpine\"\n    ports:\n      - 6379:6379\n  mongo:\n    image: mongo\n    restart: always\n    ports:\n      - 27017:27017\n</code></pre> <p>Spin up the containers with:</p> <pre><code>docker-compose up\n</code></pre> <p>And after use shut them down with:</p> <pre><code>docker-compose down\n</code></pre>"},{"location":"local-setup/intellij/#starting-lila","title":"Starting lila","text":"<ol> <li><code>docker-compose up</code> to start the infrastructure</li> <li><code>./ui/build</code> to build CSS and JS</li> <li>Open up the <code>lila</code> and <code>lila-ws</code> projects in IntelliJ.</li> <li>Go to the sbt shells in your IntelliJ projects and type <code>run</code></li> <li>Visit http://localhost:9663/</li> </ol>"},{"location":"local-setup/intellij/#debugging-lila","title":"Debugging lila","text":"<p>In the IntelliJ settings find the sbt build tools options and check <code>Enable debugging</code>:</p> <p></p> <p>After reloading your project you should see a new button in your sbt shell:</p> <p></p> <p>Click it and a debugger will be attached to your SBT shell. You can now set breakpoints and debug through your code!</p> <p></p>"},{"location":"local-setup/lila-search/","title":"lila-search","text":"<ul> <li>Install elasticsearch 7.x.x</li> </ul> <p>No special config is necessary. We'll use the default port 9200</p> <ul> <li>Setup lila-search:</li> </ul> <pre><code>git clone https://github.com/lichess-org/lila-search\ncd lila-search\nsbt stage\n./target/universal/stage/bin/lila-search\n</code></pre> <p><code>sbt run</code> does not work for lila-search at press time but you can use stage build. Maybe this will be fixed.</p> <ul> <li>Add the following line to <code>lila/conf/application.conf</code>:   <pre><code>search.enabled = true\n</code></pre></li> <li>Either use spamdb to add and automatically index games, posts, and teams:   <pre><code>spamdb/spamdb.py --es\n</code></pre> <code>--es</code> connects spamdb to elasticsearch (at localhost:9200) and indexes your database.   You're done, you can skip the rest.</li> <li> <p>Or create indices manually (games will only be indexed on completion or computer analysis):</p> </li> <li> <p>Before playing / analyzing any games on lila, you must do this:</p> <pre><code>curl -XPOST http://localhost:9673/mapping/game\n</code></pre> </li> <li> <p>Now you can startup lila, login as the lichess user, go to <code>http://localhost:9663/dev/cli</code>, and run these commands:</p> <pre><code>```\nforum search reset\nteam search reset\nstudy search reset\n```\n</code></pre> <p>You should now be able to search.</p> </li> </ul>"},{"location":"local-setup/mac/","title":"Onboarding (MacOS)","text":"<p>Follow the Linux setup guide. Please note the following differences:</p> <p>Consider using the homebrew package manager to install most lila dependencies, but install coursier and scala using these instructions. Run <code>cs update</code> from time to time to keep your sbt tools up to date.</p>"},{"location":"local-setup/mac/#lila","title":"Lila","text":"<p>set <code>play.server.netty.transport = \"jdk\"</code> in <code>base/application.conf</code></p>"},{"location":"local-setup/mac/#lila-ws","title":"lila-ws","text":""},{"location":"local-setup/mac/#apple-m1","title":"Apple M1","text":"<p>Remove this line from build.sbt:</p> <pre><code>-libraryDependencies += \"org.reactivemongo\"           % \"reactivemongo-shaded-native\"  % s\"$reactivemongoVersion-$os-x86-64\"\n</code></pre>"},{"location":"local-setup/windows/","title":"Onboarding (Windows)","text":"<p>The simplest way to run lila on Windows is to simply use the Docker image. It will set up and run all programs and services required for lila inside a container. You can then read the Linux instructions for instructions on how to build and run lila itself and additional Lichess services like fishnet and for further instructions on seeding your database, gaining admin access, troubleshooting, etc.</p> <p>An alternative is enabling the Windows Subsystem for Linux, installing an operating system, and again following the Linux instructions.</p> <p>If you're running Ubuntu using WSL, then you'll run into problems when installing some of the required packages because <code>apt-key</code> is bugged in WSL. But there's a workaround - all <code>apt-key</code> commands you come across have to be rewritten in the way as described in this issue comment: https://github.com/Microsoft/WSL/issues/3286#issuecomment-395980867</p> <p>You may run into some problems with redis and mongodb using WSL. Follow these instructions for redis and these instructions for mongodb</p>"}]}